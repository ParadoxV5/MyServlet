package xyz.paradoxv5.servlet;

import javax.sql.DataSource;
import java.sql.Connection;
import javax.naming.InitialContext;
import java.sql.SQLException;
import javax.naming.NamingException;

/**
  A synchronized wrapper to {@linkplain #get() provide from a DataSource} generated by {@link InitialContext#lookup(String)}.
  @see #DBConnectionPool(String)
*/
public class DBConnectionPool {
  /**
    The wrapped {@link DataSource} â€“
    normally publicly inaccessible beyond {@link DataSource#getConnection()} with {@link #get()}
  */
  protected final DataSource dataSource;
  
  /** Constructor: Initialize the wrapping {@link DataSource} with the given {@code resourceName}
    @param resourceName
      The name of the resource as defined in {@code context.xml}; will pass to {@link InitialContext#lookup(String)}
    @throws
      NamingException if {@link InitialContext#lookup(String)} {{@code throw}s one
    @see DBConnectionPool
  */
  public DBConnectionPool(String resourceName) throws NamingException {
    dataSource = (DataSource)((new InitialContext()).lookup("java:/comp/env/" + resourceName));
  }
  
  /** Get a Connection from the wrapped DataSource
    @return
      {@link #dataSource}{@link DataSource#getConnection() .getConnection()}
    @throws SQLException
      If the call above throws this error
  */
  public synchronized Connection get() throws SQLException {
    return dataSource.getConnection();
  }
}